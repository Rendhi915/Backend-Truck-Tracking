// Updated Prisma Schema for Fleet Management with complete configuration
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis, uuidOssp(map: "uuid-ossp")]
}

// User management
model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role         String   @default("operator") @db.VarChar(20)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("users")
}

// Truck models reference data
model TruckModel {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(50)
  manufacturer     String   @db.VarChar(50)
  capacityTons     Int      @map("capacity_tons")
  fuelTankCapacity Int      @map("fuel_tank_capacity")
  tireCount        Int      @default(6) @map("tire_count")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  
  // Relations
  trucks Truck[]

  @@map("truck_models")
}

// Main trucks entity
model Truck {
  id               Int       @id @default(autoincrement())
  truckNumber      String    @unique @map("truck_number") @db.VarChar(20)
  modelId          Int?      @map("model_id")
  status           TruckStatus @default(ACTIVE)
  latitude         Decimal?  @db.Decimal(10, 8)
  longitude        Decimal?  @db.Decimal(11, 8)
  speed            Decimal   @default(0) @db.Decimal(5, 2)
  heading          Int       @default(0)
  fuelPercentage   Decimal   @default(100) @map("fuel_percentage") @db.Decimal(5, 2)
  payloadTons      Decimal   @default(0) @map("payload_tons") @db.Decimal(6, 2)
  driverName       String?   @map("driver_name") @db.VarChar(100)
  engineHours      Int       @default(0) @map("engine_hours")
  odometer         Int       @default(0)
  lastMaintenance  DateTime? @map("last_maintenance") @db.Date
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  // Relations
  model              TruckModel?          @relation(fields: [modelId], references: [id])
  tirePressures      TirePressure[]
  alerts             TruckAlert[]
  locationHistory    LocationHistory[]
  maintenanceRecords MaintenanceRecord[]

  @@index([latitude, longitude], name: "idx_trucks_coordinates")
  @@index([status], name: "idx_trucks_status")
  @@index([updatedAt(sort: Desc)], name: "idx_trucks_updated_at")
  @@map("trucks")
}

// Tire pressure monitoring with real-time data
model TirePressure {
  id           Int         @id @default(autoincrement())
  truckId      Int         @map("truck_id")
  tirePosition String      @map("tire_position") @db.VarChar(20)
  tireNumber   Int         @map("tire_number")
  pressurePsi  Decimal     @map("pressure_psi") @db.Decimal(5, 1)
  status       TireStatus  @default(NORMAL)
  temperature  Decimal?    @db.Decimal(5, 2)
  recordedAt   DateTime    @default(now()) @map("recorded_at") @db.Timestamp(3)

  // Relations
  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@unique([truckId, tireNumber])
  @@index([truckId, recordedAt(sort: Desc)], name: "idx_tire_pressures_truck_recorded")
  @@map("tire_pressures")
}

// GPS tracking and location history
model LocationHistory {
  id             Int      @id @default(autoincrement())
  truckId        Int      @map("truck_id")
  latitude       Decimal  @db.Decimal(10, 8)
  longitude      Decimal  @db.Decimal(11, 8)
  speed          Decimal  @default(0) @db.Decimal(5, 2)
  heading        Int      @default(0)
  fuelPercentage Decimal? @map("fuel_percentage") @db.Decimal(5, 2)
  recordedAt     DateTime @default(now()) @map("recorded_at") @db.Timestamp(3)

  // Relations
  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@index([truckId, recordedAt(sort: Desc)], name: "idx_location_history_truck_time")
  @@index([recordedAt(sort: Desc)], name: "idx_location_history_recorded_at")
  @@map("location_history")
}

// Alert and notification system
model TruckAlert {
  id         Int           @id @default(autoincrement())
  truckId    Int           @map("truck_id")
  alertType  String        @map("alert_type") @db.VarChar(50)
  severity   AlertSeverity @default(MEDIUM)
  message    String        @db.Text
  isResolved Boolean       @default(false) @map("is_resolved")
  createdAt  DateTime      @default(now()) @map("created_at") @db.Timestamp(3)
  resolvedAt DateTime?     @map("resolved_at") @db.Timestamp(3)

  // Relations
  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@index([truckId, isResolved], name: "idx_truck_alerts_truck_resolved")
  @@index([createdAt(sort: Desc)], name: "idx_truck_alerts_created_at")
  @@map("truck_alerts")
}

// Mining zones with PostGIS geometry (handled with raw SQL)
model MiningZone {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  zoneType  String   @map("zone_type") @db.VarChar(50)
  // Note: PostGIS GEOMETRY field handled in application layer with raw SQL
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)

  @@map("mining_zones")
}

// Maintenance tracking and scheduling
model MaintenanceRecord {
  id              Int       @id @default(autoincrement())
  truckId         Int       @map("truck_id")
  maintenanceType String    @map("maintenance_type") @db.VarChar(50)
  description     String?   @db.Text
  startDate       DateTime  @map("start_date") @db.Timestamp(3)
  endDate         DateTime? @map("end_date") @db.Timestamp(3)
  cost            Decimal?  @db.Decimal(10, 2)
  technicianName  String?   @map("technician_name") @db.VarChar(100)
  isCompleted     Boolean   @default(false) @map("is_completed")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(3)

  // Relations
  truck Truck @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@index([truckId, startDate(sort: Desc)], name: "idx_maintenance_truck_date")
  @@map("maintenance_records")
}

// Enums for type safety
enum TruckStatus {
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  MAINTENANCE @map("maintenance")

  @@map("truck_status")
}

enum TireStatus {
  NORMAL @map("normal")
  LOW    @map("low")
  HIGH   @map("high")

  @@map("tire_status")
}

enum AlertSeverity {
  LOW      @map("low")
  MEDIUM   @map("medium")
  HIGH     @map("high")
  CRITICAL @map("critical")

  @@map("alert_severity")
}

// Views for reporting (handled with raw SQL queries in application)
// These are not actual Prisma models but represent the views we'll create

/// Dashboard statistics view - handled with raw SQL
/// SELECT COUNT(*) as total_trucks, ...
model DashboardStatsView {
  totalTrucks       Int @map("total_trucks")
  activeTrucks      Int @map("active_trucks")
  inactiveTrucks    Int @map("inactive_trucks")
  maintenanceTrucks Int @map("maintenance_trucks")
  avgFuel           Decimal @map("avg_fuel") @db.Decimal(5,2)
  totalPayload      Decimal @map("total_payload") @db.Decimal(10,2)
  totalAlerts       Int @map("total_alerts")

  @@ignore
}

/// Truck summary with aggregated data - handled with raw SQL  
/// SELECT t.*, tm.name as model_name, ...
model TruckSummaryView {
  id                Int      @id
  truckNumber       String   @map("truck_number")
  modelName         String?  @map("model_name")
  manufacturer      String?
  status            String
  longitude         Decimal? @db.Decimal(11,8)
  latitude          Decimal? @db.Decimal(10,8)
  speed             Decimal  @db.Decimal(5,2)
  heading           Int
  fuelPercentage    Decimal  @map("fuel_percentage") @db.Decimal(5,2)
  payloadTons       Decimal  @map("payload_tons") @db.Decimal(6,2)
  driverName        String?  @map("driver_name")
  engineHours       Int      @map("engine_hours")
  odometer          Int
  lastMaintenance   DateTime? @map("last_maintenance")
  lastUpdate        DateTime @map("last_update")
  activeAlertsCount Int      @map("active_alerts_count")

  @@ignore
}